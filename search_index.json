[["index.html", "The documentation of jjAnno R package Chapter 1 Prerequisites", " The documentation of jjAnno R package Junjun Lao 2022-07-26 Chapter 1 Prerequisites Let’s load some packages that we need: library(jjAnno) library(scales) library(ggplot2) If you are interested in my works, welcome to my github: https://github.com/junjunlab https://github.com/junjunlab. This package mainly is used to add different annotations beside the figures. "],["intro.html", "Chapter 2 Introduction 2.1 Installation 2.2 Example 2.3 Example 2.4 If you want see more parameters, type:", " Chapter 2 Introduction In fact, adding multiple different annotations (text, segment, rect, points, images and so on) beside the plot is needed. But we do not want to spend much time ,energy and code rendering our raw figures. The Ai(Artificial Intelligence) is a good choice for you to produce a complex plot but without much accuracy. Here I provide a package jjAnno that you can add different annotaions including point, text, rect, segemnt, image beside or inside the plot. This will save your much time and cost to make a complex figure. 2.1 Installation You can install the development version of jjAnno like so: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/jjAnno&quot;) 2.2 Example An eaxmple shows here: image 2.3 Example Let’s see an example: library(jjAnno) data(&quot;pdot&quot;) pdot We add some annotations on this figure: # add segment P1 &lt;- annoSegment(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1:21), yPosition = 8.8, segWidth = 0.7, pCol = c(useMyCol(&#39;stallion&#39;,20),&#39;orange&#39;)) # add rect1 P2 &lt;- annoRect(object = P1, annoPos = &#39;left&#39;, annoManual = T, yPosition = list(c(0.5,4.5), c(4.5,8.5)), xPosition = c(-3.5,0.3), pCol = rep(&#39;white&#39;,2), pFill = useMyCol(&#39;calm&#39;,2), alpha = 0.5) # add rect2 P3 &lt;- annoRect(object = P2, annoPos = &#39;left&#39;, annoManual = T, yPosition = list(c(2.5), c(6.5)), xPosition = c(-3.5,16.5), pCol = &#39;black&#39;, pFill = &#39;transparent&#39;, lty = &#39;dashed&#39;, lwd = 3) # add branch P4 &lt;- annoSegment(object = P3, annoPos = &#39;top&#39;, annoManual = T, xPosition = list(c(1,3,4,7,9,11,12,15,17,19,20), c(2,3,6,8,10,11,14,16,18,19,21)), yPosition = 9.2, segWidth = 0.8, pCol = rep(&#39;black&#39;,11), addBranch = T, branDirection = -1, lwd = 3) # add text text &lt;- c(&#39;Mesothelial&#39;,&#39;Extragonadal&#39;,&#39;Gonadal&#39;,&#39;Supporting lineage&#39;,&#39;Interstitial lineage&#39;, &#39;Testis fate&#39;,&#39;Early supporting&#39;,&#39;Granulosa&#39;,&#39;Sertoli&#39;,&#39;sPAX8&#39;,&#39;Mesenchymal&#39;) # add text annoSegment(object = P4, annoPos = &#39;top&#39;, annoManual = T, xPosition = list(c(1,3,4,7,9,11,12,15,17,19,20), c(2,3,6,8,10,11,14,16,18,19,21)), yPosition = 9.2, segWidth = 0.8, pCol = rep(&#39;black&#39;,11), addBranch = T, branDirection = -1, lwd = 3, addText = T, textLabel = text, textCol = c(rep(&#39;black&#39;,5),&#39;blue&#39;,rep(&#39;black&#39;,5)), textRot = 45, hjust = 0) 2.4 If you want see more parameters, type: ?useMyCol ?annoPoint ?annoRect ?annoSegment ?annoImage ?annoLegend "],["usemycol.html", "Chapter 3 useMyCol", " Chapter 3 useMyCol This function provides ArchR package’s colors to plot. Show all palettes: library(jjAnno) ## ## 载入程辑包：&#39;jjAnno&#39; ## The following objects are masked _by_ &#39;.GlobalEnv&#39;: ## ## p, pdot library(scales) ## Warning: 程辑包&#39;scales&#39;是用R版本4.1.3 来建造的 # show all plattes useMyCol(showAll = T) ## [1] &quot;stallion&quot; &quot;stallion2&quot; &quot;calm&quot; &quot;kelly&quot; &quot;bear&quot; ## [6] &quot;ironMan&quot; &quot;circus&quot; &quot;paired&quot; &quot;grove&quot; &quot;summerNight&quot; ## [11] &quot;zissou&quot; &quot;darjeeling&quot; &quot;rushmore&quot; &quot;captain&quot; &quot;horizon&quot; ## [16] &quot;horizonExtra&quot; &quot;blueYellow&quot; &quot;sambaNight&quot; &quot;solarExtra&quot; &quot;whitePurple&quot; ## [21] &quot;whiteBlue&quot; &quot;comet&quot; &quot;greenBlue&quot; &quot;beach&quot; &quot;coolwarm&quot; ## [26] &quot;fireworks&quot; &quot;greyMagma&quot; &quot;fireworks2&quot; &quot;purpleOrange&quot; Draw these colors: # plot colors show_col(useMyCol(&#39;stallion&#39;,20)) ## [1] &quot;This palatte have 20 colors!&quot; # ironMan show_col(useMyCol(&#39;ironMan&#39;,15)) ## [1] &quot;This palatte have 15 colors!&quot; # whitePurple show_col(useMyCol(&#39;whitePurple&#39;,9)) ## [1] &quot;This palatte have 9 colors!&quot; "],["annopoint.html", "Chapter 4 annoPoint 4.1 test data 4.2 annotate plot", " Chapter 4 annoPoint This function can be used to add some points annotations beside the plot or in plot. 4.1 test data Let’s make a test data: library(jjAnno) library(ggplot2) ## Warning: 程辑包&#39;ggplot2&#39;是用R版本4.1.3 来建造的 df &lt;- data.frame(x = 1:10,y = sample(1:10,10), x1 = LETTERS[1:10]) Make a simple plot: library (ggplot2) p &lt;- ggplot(df, aes(x,x1)) + geom_point(aes(size = x,color = x,alpha = x)) + theme_bw(base_size = 14) + scale_x_continuous(breaks = seq(1,10,1)) + # scale_y_continuous(breaks = seq(1,10,1)) + scale_color_gradient(low = &#39;grey50&#39;,high = &#39;#339933&#39;,name = &#39;&#39;) + coord_cartesian(clip = &#39;off&#39;) + theme(aspect.ratio = 1, plot.margin = margin(t = 1,r = 1,b = 1,l = 1,unit = &#39;cm&#39;), axis.text.x = element_text(vjust = unit(-1.5,&#39;native&#39;)), legend.position = &#39;left&#39;) + xlab(&#39;&#39;) + ylab(&#39;&#39;) p Or we can use test data in this package: data(p) 4.2 annotate plot Now we can use annoPoint to add points in our plot. Default is the top position: # default plot annoPoint(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10)) ## [1] &quot;This palatte have 20 colors!&quot; We can define multiple yPosition: # specify yPosition annoPoint(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = rep(c(2,4,2,6,4),each = 2)) ## [1] &quot;This palatte have 20 colors!&quot; Add to right: # add right annoPoint(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10)) ## [1] &quot;This palatte have 20 colors!&quot; Add to left: # left annoPoint(object = p, annoPos = &#39;left&#39;, yPosition = c(1:10)) ## [1] &quot;This palatte have 20 colors!&quot; We can supply xPosition to ajust a suitable position: # supply xPosition to ajust annoPoint(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10), xPosition = 0.3) ## [1] &quot;This palatte have 20 colors!&quot; Change point size and shape: # change point size and shape annoPoint(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), ptSize = 2, ptShape = 25) ## [1] &quot;This palatte have 20 colors!&quot; You can also add multiple annotations: # add multiple annotations p1 &lt;- annoPoint(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), ptSize = 2, ptShape = 25) ## [1] &quot;This palatte have 20 colors!&quot; annoPoint(object = p1, annoPos = &#39;right&#39;, yPosition = c(1:10), ptSize = 2, ptShape = 23) ## [1] &quot;This palatte have 20 colors!&quot; "],["annorect.html", "Chapter 5 annoRect 5.1 add GO plot with annotation 5.2 annotate", " Chapter 5 annoRect This function can be used to add some rects annotations beside the plot or in plot. Simple annotation: library(jjAnno) library(ggplot2) # default plot annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; You can adjust the yPosition: # adjust yPosition annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Change color alpha: # change color alpha annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5), alpha = 0.5) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Set rect width: # adjust rectWidth annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5), rectWidth = 0.9) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Change rect color and fill: # change rect color and fill annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5), rectWidth = 0.9, pCol = rep(&#39;black&#39;,10), pFill = rep(&#39;grey80&#39;,10)) ## [1] &quot;This palatte have 20 colors!&quot; Change rect lty and lwd: # change rect lty and lwd annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5), rectWidth = 0.9, pCol = rep(&#39;black&#39;,10), pFill = rep(&#39;grey80&#39;,10), lty = &#39;dashed&#39;, lwd = 2) ## [1] &quot;This palatte have 20 colors!&quot; Add only partial annotations: # only add some annotations annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1,3,5,7,9), yPosition = c(11,11.5)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Supply your own coordinates to annotate: # supply your own coordinates to annotate annoRect(object = p, annoPos = &#39;top&#39;, annoManual = T, xPosition = list(c(1,6), c(5,10)), yPosition = c(11,11.5), pCol = rep(&#39;black&#39;,2), lty = &#39;solid&#39;, lwd = 2) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; You can supply multiple yPosition in list: # multiple yPosition annoRect(object = p, annoPos = &#39;top&#39;, annoManual = T, xPosition = list(c(1,6), c(5,10)), yPosition = list(c(11,11.5), c(11.5,12)), pCol = rep(&#39;black&#39;,2), lty = &#39;solid&#39;, lwd = 2) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add to right: # add to right annoRect(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10), xPosition = c(10.5,11), rectWidth = 0.8) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add multiple annotations: # add multiple p1 &lt;- annoRect(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11,11.5), rectWidth = 0.9, pCol = rep(&#39;black&#39;,10), pFill = rep(&#39;grey80&#39;,10), lty = &#39;dashed&#39;, lwd = 2) ## [1] &quot;This palatte have 20 colors!&quot; # add second annotation p2 &lt;- annoRect(object = p1, annoPos = &#39;right&#39;, yPosition = c(1:10), xPosition = c(10.5,11), rectWidth = 0.8) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; # add third annotation annoRect(object = p2, annoPos = &#39;top&#39;, xPosition = c(1:10), yPosition = c(11.8,12.3), rectWidth = 0.8) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; 5.1 add GO plot with annotation Load test data: data(pgo) pgo Here is the plot code: # Plot pgo &lt;- ggplot(df1,aes(x = log10PValue,y = Term)) + geom_point(aes(size = log10PValue, color = log10PValue)) + scale_color_gradient2(low = &#39;blue&#39;,mid = &#39;green&#39;,high = &#39;red&#39;, name = &#39;&#39;,midpoint = 2.1) + scale_y_discrete(position = &#39;right&#39;) + scale_x_continuous(breaks = seq(0,2.8,0.4),limits = c(0,2.8)) + theme_grey(base_size = 14) + theme(legend.position = &#39;left&#39;, plot.margin = margin(t = 1,r = 1,b = 1,l = 1,unit = &#39;cm&#39;), aspect.ratio = 2.5 ) + coord_cartesian(clip = &#39;off&#39;) + ylab(&#39;&#39;) 5.2 annotate Add 15 rects: # another example annotation GO terms annoRect(object = pgo, annoPos = &#39;right&#39;, yPosition = c(1:15), pCol = rep(&#39;transparent&#39;,15), pFill = rep(c(&#39;#F5F0BB&#39;,&#39;#C4DFAA&#39;,&#39;#90C8AC&#39;),each = 5), xPosition = c(3,10), rectWidth = 1) Supply own coordinates to add(3 rects): # annotate mannually annoRect(object = pgo, annoPos = &#39;right&#39;, annoManual = T, xPosition = c(3,10), yPosition = list(c(0.5,5.5,10.5), c(5.5,10.5,15.5)), pCol = rep(&#39;black&#39;,3), pFill = c(&#39;#F5F0BB&#39;,&#39;#C4DFAA&#39;,&#39;#90C8AC&#39;)) "],["annosegment.html", "Chapter 6 annoSegment", " Chapter 6 annoSegment This function can be used to add some segments annotations beside the plot or in plot. Simple annotation: library(jjAnno) library(ggplot2) # default plot annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Adjust rectWidth: # adjust rectWidth annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add segments with arrow: library(ggplot2) # add segments with arrow annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.9, lwd = 1, mArrow = arrow(ends = &#39;both&#39;, length = unit(0.2,&#39;cm&#39;), type = &#39;closed&#39;)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Change rect color and fill: # change rect color and fill annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, pCol = useMyCol(&#39;horizon&#39;,10)) ## [1] &quot;This palatte have 10 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add segments with branch: # add branch annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Change branch direction: # change branch direction annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4, branDirection = -1) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add to botomn: # add to botomn annoSegment(object = p, annoPos = &#39;botomn&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add to right: # add to right annoSegment(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4, branDirection = -1) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add branch with arrow: # add to botomn and make branch taged with arrow annoSegment(object = p, annoPos = &#39;botomn&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 3, bArrow = arrow(length = unit(0.2,&#39;cm&#39;), ends = &#39;last&#39;)) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add text label: # add text label annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4, branDirection = -1, addText = T, textLabel = paste0(&#39;anno&#39;,1:10,sep = &#39;&#39;), textRot = 0, textSize = 15) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Add text space relative to segments: # add text space from segments annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4, branDirection = -1, addText = T, textLabel = paste0(&#39;anno&#39;,1:10,sep = &#39;&#39;), textRot = 45, textSize = 15, textHVjust = 0.5) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Change text color: # change text color annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, addBranch = T, lwd = 4, branDirection = -1, addText = T, textLabel = paste0(&#39;anno&#39;,1:10,sep = &#39;&#39;), textRot = 45, textSize = 15, textHVjust = 0.5, textCol = rep(&#39;grey50&#39;,10)) ## [1] &quot;This palatte have 20 colors!&quot; Change segments yPosition: # change yPosition annoSegment(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), segWidth = 0.8, pCol = useMyCol(&#39;horizon&#39;,10), yPosition = 5) ## [1] &quot;This palatte have 10 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Supply your own coordinates to annotate: # supply your own coordinates to annotate annoSegment(object = p, annoPos = &#39;top&#39;, annoManual = T, xPosition = list(c(1,6), c(5,10)), yPosition = 11, pCol = c(&#39;green&#39;,&#39;orange&#39;)) ## [1] &quot;This palatte have 20 colors!&quot; Add branch to plot: # add branch to plot annoSegment(object = p, annoPos = &#39;top&#39;, annoManual = T, addBranch = T, lwd = 3, segWidth = 0.5, xPosition = list(c(1,6), c(5,10)), yPosition = c(11,11), pCol = c(&#39;green&#39;,&#39;orange&#39;), branDirection = -1) ## [1] &quot;This palatte have 20 colors!&quot; Add to right: # add to right annoSegment(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10), segWidth = 0.8) ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Annotate GO plot with segments: # annotate mannually annoSegment(object = pgo, annoPos = &#39;left&#39;, annoManual = T, xPosition = rep(-0.15,3), yPosition = list(c(1,6,11), c(5,10,15)), pCol = c(&#39;#F5F0BB&#39;,&#39;#C4DFAA&#39;,&#39;#90C8AC&#39;), segWidth = 1) "],["annoimage.html", "Chapter 7 annoImage", " Chapter 7 annoImage This function can be used to add some images annotations beside the plot or in plot. Load images: library(jjAnno) img1 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;1.jpg&quot;, package = &quot;jjAnno&quot;) img2 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;2.jpg&quot;, package = &quot;jjAnno&quot;) img3 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;3.jpg&quot;, package = &quot;jjAnno&quot;) img4 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;4.jpg&quot;, package = &quot;jjAnno&quot;) img5 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;5.jpg&quot;, package = &quot;jjAnno&quot;) img6 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;6.jpg&quot;, package = &quot;jjAnno&quot;) img7 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;7.jpg&quot;, package = &quot;jjAnno&quot;) img8 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;8.jpg&quot;, package = &quot;jjAnno&quot;) img9 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;9.jpg&quot;, package = &quot;jjAnno&quot;) img10 &lt;- system.file(&quot;extdata/animal-img/&quot;, &quot;10.jpg&quot;, package = &quot;jjAnno&quot;) imgs &lt;- c(img1,img2,img3,img4,img5,img6,img7,img8,img9,img10) Simple annotation: # add legend annoImage(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), images = imgs, yPosition = c(11,12)) Ajust width: # change width annoImage(object = p, annoPos = &#39;top&#39;, xPosition = c(1:10), images = imgs, yPosition = c(11,11.8), segWidth = 0.8) Add to right: # add to right annoImage(object = p, annoPos = &#39;right&#39;, yPosition = c(1:10), images = imgs, xPosition = c(11,11.8), segWidth = 0.8) Add to botomn: # add to botomn annoImage(object = p, annoPos = &#39;botomn&#39;, xPosition = c(1:10), images = imgs, yPosition = c(-1.2,-0.4), segWidth = 0.8) Annotate manually: # annotate manually annoImage(object = p, annoPos = &#39;right&#39;, yPosition = list(c(1:10), c(1:10)), images = imgs, annoManual = T, xPosition = list(rep(c(11,11.8),each = 5), rep(c(11.8,12.6),each = 5)), segWidth = 0.8) "],["annolegend.html", "Chapter 8 annoLegend", " Chapter 8 annoLegend This function can be used to add some legend annotations beside the plot or in plot. Simple annotation: library(jjAnno) # add legend annoLegend(object = p, labels = paste(&#39;legend &#39;,1:5), pch = 21, col = &#39;black&#39;, fill = useMyCol(&#39;paired&#39;,5), textSize = 15) ## [1] &quot;This palatte have 12 colors!&quot; Change legend position: # change pos annoLegend(object = p, relPos = c(0.2,0.9), labels = paste(&#39;legend &#39;,1:5), pch = 21, col = &#39;black&#39;, fill = useMyCol(&#39;paired&#39;,5), textSize = 15) ## [1] &quot;This palatte have 12 colors!&quot; Add multiple shapes: # multiple shapes annoLegend(object = p, relPos = c(0.2,0.9), labels = paste(&#39;legend &#39;,1:5), pch = 21:25, col = &#39;black&#39;, fill = useMyCol(&#39;paired&#39;,5), textSize = 15) ## [1] &quot;This palatte have 12 colors!&quot; Define x and y position: # define x and y position annoLegend(object = p, xPosition = 12, yPosition = 5, labels = paste(&#39;legend &#39;,1:5), pch = 21:25, col = &#39;black&#39;, fill = useMyCol(&#39;paired&#39;,5), textSize = 15) ## [1] &quot;This palatte have 12 colors!&quot; "],["mapping-introduction.html", "Chapter 9 mapping introduction 9.1 Basic plot 9.2 Annotate with annoSegment 9.3 Annotate with annoRect 9.4 Annotate with rotated Rect 9.5 Annotate with annoPoint2 9.6 Annotate with annoTriangle 9.7 Example 9.8 End", " Chapter 9 mapping introduction Imaging that you need to supply multiple exact coordinates to add some annotations when set annoManual = T in jjAnno or in other situations. This way is not so elegant especially when you have multiple annotations. A pile of numbers will confuse you sometimes. It will be more convenient to add the annotations with an auto-annotatation mode. Here you only need to add one group column and specify this column is used to annotate your axis. jjAnno will calculate the x/y coordinates automatically which save your much time. Just a little ajustments need to be done to make your figure much pretty. Note 1: You should make sure that your plot x/y axis orders is correct before to annotate. Turn off the clip(coord_cartesian(clip = 'off')). Try to expand the plot margin if the viewplot is not wholly shown. Note 2: The mapping operation can be used on the following functions: annoPoint2 annoRect annoSegment 9.1 Basic plot Let’s make a simple dot plot: # load data dot_data &lt;- read.delim(&#39;gene-dot.txt&#39;,header = T) %&gt;% arrange(class) # check head(dot_data,3) # cell gene class mean.expression percentage # 1 1b CoelEpi GATA4 DMRT1 Early supporting 0.3749122 36.03614 # 2 1b CoelEpi GATA4 CPA2 Early supporting 0.7495705 95.82235 # 3 1b CoelEpi GATA4 GPR37 Early supporting 0.1604790 95.79420 # colnames colnames(dot_data) # [1] &quot;cell&quot; &quot;gene&quot; &quot;class&quot; &quot;mean.expression&quot; &quot;percentage&quot; unique(dot_data$cell) # [1] &quot;1b CoelEpi GATA4&quot; &quot;2a Early somatic&quot; &quot;2b ESGC male&quot; &quot;2b ESGC female&quot; # [5] &quot;2c PreGC-I&quot; &quot;2d Sertoil&quot; &quot;3a Early sPAX8&quot; &quot;3b Gi&quot; # add cell group dot_data$cellGroup &lt;- case_when( dot_data$cell %in% c(&quot;1b CoelEpi GATA4&quot;, &quot;2a Early somatic&quot;, &quot;2b ESGC male&quot;) ~ &quot;cell type1&quot;, dot_data$cell %in% c(&quot;2b ESGC female&quot;, &quot;2c PreGC-I&quot;, &quot;2d Sertoil&quot;) ~ &quot;cell type2&quot;, dot_data$cell %in% c(&quot;3a Early sPAX8&quot;, &quot;3b Gi&quot;) ~ &quot;cell type3&quot; ) We should make the order to be shown correctly: # order dot_data$gene &lt;- factor(dot_data$gene,levels = unique(dot_data$gene)) Plot: # plot pdot &lt;- ggplot(dot_data,aes(x = gene,y = cell)) + geom_point(aes(fill = mean.expression,size = percentage), color = &#39;black&#39;, shape = 21) + theme_bw(base_size = 14) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + scale_fill_gradient2(low = &#39;white&#39;,mid = &#39;#EB1D36&#39;,high = &#39;#990000&#39;, midpoint = 0.5, name = &#39;Mean expression&#39;) + scale_size(range = c(1,13)) + theme(panel.grid = element_blank(), axis.text = element_text(color = &#39;black&#39;), aspect.ratio = 0.5, plot.margin = margin(t = 1,r = 1,b = 1,l = 1,unit = &#39;cm&#39;), axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5, face = &#39;italic&#39;)) + coord_cartesian(clip = &#39;off&#39;) pdot Or you can load the test data in jjAnno package: library(jjAnno) library(ggplot2) data(&quot;pdot&quot;) Here we use column “class” and “cellGroup” to annotate X and Y axis. 9.2 Annotate with annoSegment Some segment annotation examples: Reference: Single-cell roadmap of human gonadal development Add segment with aesGroup = T and aesGroName = ‘class’, we do not need to supply x coordinate and set annoManual = T anymore: # pdot &lt;- pdot + # theme(aspect.ratio = NULL) # add segment annoSegment(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = 8.8, segWidth = 0.5) Add branch: # add branch annoSegment(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = 8.8, segWidth = 0.5, addBranch = T, lwd = 2, branDirection = -1, pCol = rep(&#39;black&#39;,11)) Add text label: # add text annoSegment(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = 8.8, segWidth = 0.5, addText = T, textRot = 45, hjust = 0) Mapping with cellGroup: # mapping cell group annoSegment(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = -3.5, segWidth = 0.5, addText = T, textRot = 90, textHVjust = -0.5, textSize = 14) 9.3 Annotate with annoRect Some rect annotation examples: Reference: Single-cell roadmap of human gonadal development Mapping with class: # mapping by group annoRect(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(9,9.5), rectWidth = 0.8) Use roundRect to add roundCorner rect: # add round rect annoRect(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(9,9.5), rectWidth = 0.8, roundRect = T) You can change the corner radius: # change corner radius annoRect(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(9,9.5), rectWidth = 0.8, roundRect = T, roundRadius = 0.5) Add to botomn: # add to botomn annoRect(object = pdot, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-2,0.25), rectWidth = 0.8, alpha = 0.35) annoRect can also add text label now: # add text label annoRect(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(9,9.5), rectWidth = 0.8, addText = T, textRot = 45, hjust = 0, textCol = rep(&#39;black&#39;,11), textHVjust = 0.5) Mapping with cellGroup: # mapping cell group annoRect(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = c(-3.5,0.25), alpha = 0.3, rectWidth = 0.8, addText = T, textRot = 90, textSize = 14, textCol = rep(&#39;black&#39;,3), textHVjust = -2.3) 9.4 Annotate with rotated Rect If you have rotated the axis text before annotatation, the text labels will do not match the rect region when you add rect annotations. Here I supply a rotateRect parameter to rotate the rect with a matched degree to produce a will-matched plot. First we move the text label to the top: # rotate the x text label(top) pdot_test &lt;- pdot + scale_x_discrete(position = &#39;top&#39;) + theme(axis.text.x = element_text(angle = 60,hjust = 0)) pdot_test Let’s add a rect annotation: # normal rect annotation annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.5)) Now rotate the rect: # rotate rect annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.4), rotateRect = T) Ajust the rect width: # ajust width annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.4), rotateRect = T, alpha = 0.5, rectWidth = 0.8) You can specify a degree you want: # supply a rotate degree annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.4), rotateRect = T, alpha = 0.5, rectWidth = 0.9, rectAngle = 20) Ypu can also shift the rect with horizotal or vertical direction: # shift the rotated rect annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.4), rotateRect = T, alpha = 0.5, rectWidth = 0.9, rectAngle = 50, normRectShift = 0.3) Adding the group text label if you want: # add group label annoRect(object = pdot_test, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(8.6,10.4), rotateRect = T, alpha = 0.5, rectWidth = 0.9, rectAngle = 50, normRectShift = 0.15, addText = T, textHVjust = 1, textRot = 60, hjust = 0, textShift = 0.5) Adding to the bottom: # rotate the x text label(bottom) pdot_test &lt;- pdot + theme(axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1)) # add to bottom annoRect(object = pdot_test, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-1.3,0.3), rotateRect = T, alpha = 0.5, rectWidth = 0.9) Adding to the left, you should ajust the rectAngle and rotatedRectShift for several times to get a perfect preference: # rotate the y text label(left) pdot_test &lt;- pdot + theme(axis.text.y = element_text(angle = 45,hjust = 1)) # rotate the rect annoRect(object = pdot_test, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = c(-3.5,0.3), rotateRect = T, alpha = 0.5, rectWidth = 0.8, rectAngle = 20, rotatedRectShift = 2.8) 9.5 Annotate with annoPoint2 Some point annotation examples: Reference: Molecular logic of cellular diversification in the mouse cerebral cortex Here I have made some improvements on the annoPoint function which make it upgrade into annoPoint2. But the annoPoint function still in this package and works well. The annoPoint2 can also be used to annotate plot with your group columns. The follwing examples show you: # mapping with class annoPoint2(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;) You can also turn on the shape mapping: # turn on shape mapping annoPoint2(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = 9, aesShape = T, ptSize = 2) Add text label: # add text label annoPoint2(object = pdot, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;class&#39;, ptSize = 2, yPosition = 9, addText = T, textRot = 45, hjust = 0, textHVjust = 0.4) Mapping with cellGroup: # mapping with cellGroup annoPoint2(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = -2.8) If you want to put the point annotation between the text and aixs, you should first expand the space between axis text and axis line: library(ggplot2) # expand y axis text space pdot1 &lt;- pdot + theme(axis.text.y = element_text(margin = margin(r = 1,unit = &#39;cm&#39;))) # add point annoPoint2(object = pdot1, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = -0.2, pCol = rep(c(&#39;#488FB1&#39;,&#39;#4FD3C4&#39;,&#39;#C1F8CF&#39;),c(3,3,2))) 9.6 Annotate with annoTriangle I also supply an annoTriangle to add triangle annotation in plot which is familiar with the following dotplot here: This figure shows the different celltype numbers’ variation along continues reaearch time point. Let’s add an triangle: # add triangle annoTriangle(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1,21), yPosition = c(8.8,9.3)) Add a border on it: # add border annoTriangle(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1,21), yPosition = c(8.8,9.3), addBorder = T, lwd = 2) You can also remove the triangle annotation: # remove triangle annoTriangle(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1,21), yPosition = c(8.8,9.3), addBorder = T, lwd = 2, addTriangle = F) There are four types triangle(RU/RD/LU/LD) which can be choosed to show: # change triangle type(4 types) annoTriangle(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1,21), yPosition = c(8.8,9.3), addBorder = T, lwd = 2, triangleType = &#39;LD&#39;) Supply colors: # change color annoTriangle(object = pdot, annoPos = &#39;top&#39;, xPosition = c(1,21), yPosition = c(8.8,9.3), addBorder = T, lwd = 2, triangleType = &#39;LD&#39;, fillCol = useMyCol(&#39;paired&#39;,10)) Add to botomn: # add to bottomn annoTriangle(object = pdot, annoPos = &#39;botomn&#39;, xPosition = c(1,21), yPosition = c(-1.7,-1.2), addBorder = T, lwd = 2, triangleType = &#39;RU&#39;, fillCol = useMyCol(&#39;paired&#39;,10)) 9.7 Example Let’s draw a correlation plot: library(jjAnno) library(ggplot2) # 加载内置数据集 data(&#39;mtcars&#39;) # 计算相关性系数 corda &lt;- data.frame(cor(mtcars)) # 上三角操作 corda[upper.tri(corda)] &lt;- NA # 加载R包 library(reshape2) library(tidyverse) # 增加行名列 corda$y &lt;- rownames(corda) # 宽数据转长数据 da &lt;- melt(data = corda) %&gt;% na.omit() # 因子化 da$variable &lt;- factor(da$variable,levels = unique(da$variable)) da$y &lt;- factor(da$y,levels = rev(unique(da$y))) # plot p &lt;- ggplot(da) + # 矩形图层 geom_tile(aes(x = variable,y = y),fill = &#39;white&#39;, show.legend = F, color = &#39;black&#39;) + # 点图层 geom_point(aes(x = variable,y = y,fill = value,size = value), show.legend = T, shape = 21,color = &#39;black&#39;) + theme_minimal(base_size = 16) + # 主题调整 theme(panel.grid = element_blank(), aspect.ratio = 1, axis.text.x = element_text(angle = 45,hjust = 1), plot.margin = margin(t = 2,unit = &#39;cm&#39;)) + # 点颜色 scale_fill_gradientn(colors = colorRampPalette(c(&quot;#F6E3C5&quot;, &quot;#A0D995&quot;, &quot;#4CACBC&quot;))(10)) + # 点大小范围 scale_size(range = c(7,14)) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + coord_cartesian(clip = &#39;off&#39;) p Add two layers point annotation: # annotate p1 &lt;- annoPoint2(object = p, annoManual = T, xPosition = c(1:11), yPosition = c(12:2)) # anno to left annoPoint2(object = p1, annoPos = &#39;left&#39;, yPosition = c(1:11), xPosition = -0.8) 9.8 End More paremeters see: ?useMyCol ?annoPoint ?annoPoint2 ?annoRect ?annoSegment ?annoImage ?annoTriangle ?annoLegend "],["facet-introduction.html", "Chapter 10 facet introduction 10.1 basic plot 10.2 annoPoint2 10.3 annoSegment 10.4 annoRect 10.5 annoTriangle", " Chapter 10 facet introduction Some new improvements have been done for jjAnno package which can be used for a facet ggplot on this version. You can specify which sub-facet plot is used with your own annotation. Note: You should not put your mapping variables in ggplot function which means you need put them in other geom_* layers. Eg. ggplot(dot_data) instead of ggplot(dot_data,aes(x = gene,y = cell)). 10.1 basic plot library(jjAnno) library(tidyverse) library(ggplot2) # load data dot_data &lt;- read.delim(&#39;gene-dot.txt&#39;,header = T) %&gt;% arrange(class) # add cell group dot_data$cellGroup &lt;- case_when( dot_data$cell %in% c(&quot;1b CoelEpi GATA4&quot;, &quot;2a Early somatic&quot;, &quot;2b ESGC male&quot;) ~ &quot;cell type1&quot;, dot_data$cell %in% c(&quot;2b ESGC female&quot;, &quot;2c PreGC-I&quot;, &quot;2d Sertoil&quot;) ~ &quot;cell type2&quot;, dot_data$cell %in% c(&quot;3a Early sPAX8&quot;, &quot;3b Gi&quot;) ~ &quot;cell type3&quot; ) # order dot_data$gene &lt;- factor(dot_data$gene,levels = unique(dot_data$gene)) # plot pdotfc &lt;- # ggplot(dot_data,aes(x = gene,y = cell)) + ggplot(dot_data) + geom_point(aes(fill = mean.expression,size = percentage, x = gene,y = cell ), color = &#39;black&#39;, shape = 21) + theme_bw(base_size = 14) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + scale_fill_gradient2(low = &#39;white&#39;,mid = &#39;#EB1D36&#39;,high = &#39;#990000&#39;, midpoint = 0.5, name = &#39;Mean expression&#39;) + scale_size(range = c(1,8)) + theme(panel.grid = element_blank(), axis.text = element_text(color = &#39;black&#39;), # aspect.ratio = 0.5, plot.margin = margin(t = 2,r = 1,b = 1,l = 1,unit = &#39;cm&#39;), axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5, face = &#39;italic&#39;)) + coord_cartesian(clip = &#39;off&#39;) pdotfc 10.2 annoPoint2 10.2.1 facet by cellGroup Let’s see a facet example: # facet by cellGroup pfacet &lt;- pdotfc + facet_wrap(~cellGroup, ncol = 1,scales = &#39;free_y&#39;, strip.position = &#39;right&#39;) pfacet Trying to add point annotation: # add to top annoPoint2(object = pfacet, annoPos = &#39;top&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type1&#39;, ptSize = 2, yPosition = 4.2) It seems that the annoPoint2 function works well! Here remember that you should supply the X and Y mapping variables with aes_x and aes_y. Also you need to point out which variable(aesGroName) and sub-facet group name(myFacetGrou) should be used to add annotation. If you want to add to the bottom, just change the myFacetGrou: # change cellGroup and add to botomn annoPoint2(object = pfacet, annoPos = &#39;botomn&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type3&#39;, yPosition = -0.6, ptSize = 2) 10.2.2 facet by class Facet by another group: # facet by class pfacet1 &lt;- pdotfc + facet_wrap(~class, nrow = 1,scales = &#39;free_x&#39;) + theme(axis.text.y = element_text(margin = margin(r = 1.2,unit = &#39;cm&#39;))) pfacet1 Adding to left: # add to left annoPoint2(object = pfacet1, annoPos = &#39;left&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;cellGroup&#39;, myFacetGrou = &#39;Early supporting&#39;, ptSize = 2, xPosition = -0.5, pCol = rep(useMyCol(&#39;paired&#39;,3),c(3,3,2))) 10.3 annoSegment Let’s see examples for annoSegment. 10.3.1 facet by cellGroup # facet by cellGroup pfacet &lt;- pdotfc + facet_wrap(~cellGroup, ncol = 1,scales = &#39;free_y&#39;, strip.position = &#39;right&#39;) + theme(plot.margin = margin(t = 5,unit = &#39;cm&#39;)) # add segment to top annoSegment(object = pfacet, annoPos = &#39;top&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type1&#39;, yPosition = 4.2, segWidth = 0.8, lwd = 4, mArrow = arrow(ends = &#39;both&#39;,length = unit(0.25,&#39;cm&#39;)), addText = T, textRot = 45, textHVjust = 0.5, hjust = 0) You can also add to the middle facet group: # add segment to &quot;cell type2&quot; top annoSegment(object = pfacet, annoPos = &#39;top&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type2&#39;, yPosition = 4, segWidth = 0.8) + theme(panel.spacing.y = unit(1,&#39;cm&#39;)) 10.3.2 facet by class # facet by class pfacet1 &lt;- pdotfc + facet_wrap(~class, nrow = 1,scales = &#39;free_x&#39;) + theme(axis.text.y = element_text(margin = margin(r = 1.2,unit = &#39;cm&#39;))) # add segment to left annoSegment(object = pfacet1, annoPos = &#39;left&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;cellGroup&#39;, myFacetGrou = &#39;Early supporting&#39;, xPosition = -0.5, segWidth = 0.8, lwd = 4, addBranch = T, branRelSegLen = 0.8, bArrow = arrow(length = unit(0.3,&#39;cm&#39;))) 10.4 annoRect Let’s see examples for annoRect. 10.4.1 facet by cellGroup # facet by cellGroup pfacet &lt;- pdotfc + facet_wrap(~cellGroup, ncol = 1,scales = &#39;free_y&#39;, strip.position = &#39;right&#39;) + theme(plot.margin = margin(t = 5,b = 4,unit = &#39;cm&#39;), axis.text.x = element_text(angle = 60,hjust = 1,vjust = 1)) # add rect to top annoRect(object = pfacet, annoPos = &#39;top&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type1&#39;, yPosition = c(4,4.6), rectWidth = 0.8, pCol = rep(&#39;black&#39;,11), lwd = 2, addText = T, textRot = 45, textHVjust = 0.6, hjust = 0) Adding to bottom: # add rect to botomn annoRect(object = pfacet, annoPos = &#39;botomn&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type3&#39;, yPosition = c(-1.2,0.4), rectWidth = 0.9, alpha = 0.5) Roate the rect: # add rotated rect to botomn annoRect(object = pfacet, annoPos = &#39;botomn&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;class&#39;, myFacetGrou = &#39;cell type3&#39;, yPosition = c(-1.5,0.3), rectWidth = 0.9, alpha = 0.5, rotateRect = T, rectAngle = 50, rotatedRectShift = 0.75) 10.4.2 facet by class # facet by class pfacet1 &lt;- pdotfc + facet_wrap(~class, nrow = 1,scales = &#39;free_x&#39;) + theme(axis.text.y = element_text(margin = margin(l = 1,unit = &#39;cm&#39;))) # add to left annoRect(object = pfacet1, annoPos = &#39;left&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;cellGroup&#39;, myFacetGrou = &#39;Early supporting&#39;, xPosition = c(-6,0.2), rectWidth = 0.9, alpha = 0.3) 10.5 annoTriangle Let’s see examples for annoRect. 10.5.1 facet by cellGroup # facet by cellGroup pfacet &lt;- pdotfc + facet_wrap(~cellGroup, ncol = 1,scales = &#39;free_y&#39;, strip.position = &#39;right&#39;) # add rect to top annoTriangle(object = pfacet, annoPos = &#39;top&#39;, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, myFacetGrou = &#39;cell type1&#39;, xPosition = c(1,21), yPosition = c(4,4.6), fillCol = c(&#39;blue&#39;,&#39;white&#39;,&#39;red&#39;)) "],["gradient-color-rect-introduction.html", "Chapter 11 gradient color rect introduction 11.1 Examples", " Chapter 11 gradient color rect introduction Here I use the rasterGrob function instead of rectGrob in grid package to acheive a rect annotation with a gradient filled colors which can make your rect annotation much pretty. relavent parameters: trun on continuesRect == TRUE. 11.1 Examples Let’s see an exampe with normal rect annotation: library(jjAnno) # load test data data(pdot) # normal example annoRect(object = pdot, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-2,0.4), rectWidth = 0.8) Add a gradient filled color rect annotation: # add continues color rect annoRect(object = pdot, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-2,0.4), rectWidth = 0.8, continuesRect = T) Add border to rect: # add border to rect annoRect(object = pdot, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-2,0.4), rectWidth = 0.8, continuesRect = T, border = T) Reverse the gradient color: # reverse color vertically annoRect(object = pdot, annoPos = &#39;botomn&#39;, aesGroup = T, aesGroName = &#39;class&#39;, yPosition = c(-2,0.4), rectWidth = 0.8, continuesRect = T, border = T, revColV = T) Add to left: # add to left annoRect(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = c(-4,0.4), rectWidth = 0.8, continuesRect = T) You can use revColH to control the colors to be arranged horizontally: # reverse color horizontally annoRect(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = c(-4,0.4), rectWidth = 0.8, continuesRect = T, revColH = T, revColV = T, border = T) You can also supply your own colors to fill in rect with a list: library(RColorBrewer) # add own color annoRect(object = pdot, annoPos = &#39;left&#39;, aesGroup = T, aesGroName = &#39;cellGroup&#39;, xPosition = c(-4,0.4), rectWidth = 0.8, continuesRect = T, revColH = T, revColV = T, conRectCol = list(brewer.pal(11,&#39;BrBG&#39;)[3:9], brewer.pal(11,&#39;PRGn&#39;)[3:9], brewer.pal(11,&#39;PiYG&#39;)[3:9])) Gradient color rect also can be applied on facet plot: # facet plot data(&quot;pdotfc&quot;) pfacet1 &lt;- pdotfc + facet_wrap(~class, nrow = 1,scales = &#39;free_x&#39;) + theme(axis.text.y = element_text(margin = margin(l = 1,unit = &#39;cm&#39;))) # add to left annoRect(object = pfacet1, annoPos = &#39;left&#39;, aesGroup = T, aes_x = &#39;gene&#39;, aes_y = &#39;cell&#39;, aesGroName = &#39;cellGroup&#39;, myFacetGrou = &#39;Early supporting&#39;, xPosition = c(-6,0.4), rectWidth = 0.9, continuesRect = T, revColH = T, revColV = T, border = T) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
